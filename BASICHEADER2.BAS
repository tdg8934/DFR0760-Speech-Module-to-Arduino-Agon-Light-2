 1000 REM
 1010 REM
 1020 REM
 1030 REM
 1040 REM
 1050 REM
 1060 IF HIMEM > &FFFF PRINT "This code will only run on BBC BASIC for Z80" : STOP
 1070 REM
 1080 REM
 1090 REM
 1100 DIM openuart% 64
 1110 DIM closeuart% 64
 1120 DIM senduart% 64
 1130 REM
 1140 REM This routine is to open the uart
 1150 FOR I%=0 TO 3 STEP 3
 1160   P%=openuart%
 1170   [
 1180   OPT I%
 1190   :
 1200   LD IX, uartstruct ; address of the uart structure
 1210   LD A, &15
 1220   RST &08 ; mos_uopen
 1230   RET
 1240   .uartstruct
 1250   DEFB &00 ; long (3 bytes) to store baud rate (115200)
 1260   DEFB &C2
 1270   DEFB &01
 1280   DEFB 8 ; data bits
 1290   DEFB 1 ; stop bits
 1300   DEFB 0 ; parity bits
 1310   DEFB 0 ; flow control
 1320   DEFB 0 ; interupt bits
 1330   ]
 1340 NEXT
 1350 :
 1360 REM This routine is to close the uart
 1370 FOR I%=0 TO 3 STEP 3
 1380   P%=closeuart%
 1390   [
 1400   OPT I%
 1410   :
 1420   LD A, &16
 1430   RST &08 ; mos_uclose
 1440   RET
 1450   ]
 1460 NEXT
 1470 :
 1480 REM This routine is to send uart data
 1490 FOR I%=0 TO 3 STEP 3
 1500   P%=senduart%
 1510   [
 1520   OPT I%
 1530   :
 1540   LD C, 65 ; char to send is stored here
 1550   LD A, &18
 1560   RST &08 ; mos_uputc
 1570   RET
 1580   ]
 1590 NEXT
 2000 REM
 2010 REM
 2020 REM
 2030 REM
 2040 REM
 2050 A = senduart% +1 : REM This is the 2nd byte into the routine
 2060 CALL openuart% : REM Open the uart
 2070 CLS 
 2080 INPUT"What is your name ?" S$
 2090 FOR S=1 TO LEN(S$)
 2100   ?A = ASC(MID$(S$,S,1))
 2110   CALL senduart% : REM Send the data bytes
 2120 NEXT
 2130 REM
 2150 REM ?A = ASC("A")
 2160 REM CALL senduart%
10000 REM ******************************
10010 REM *         AGON LIGHT 2       *
10020 REM *          BBC BASIC         *
10030 REM *      AUTO HEADER FILE      *
10040 REM *      BY STEVE LOVEJOY      *
10050 REM *   ICON BY ARNOLD MESZAROS  *
10060 REM ******************************
10070 :
10080 PRINT TAB(3,6) "MODE  0 = 80x60: 16 colours (640x480) 60hz"
10090 PRINT TAB(3,8) "MODE  1 = 80x60:  4 colours (640x480) 60hz"
10100 PRINT TAB(3,10) "MODE  2 = 80x60:  2 colours (640x480) 60hz"
10110 PRINT TAB(3,12) "MODE  3 = 80x30: 64 colours (640x240) 60hz"
10120 PRINT TAB(3,14) "MODE  4 = 80x30: 16 colours (640x240) 60hz"
10130 PRINT TAB(3,16) "MODE  5 = 80x30:  4 colours (640x240) 60hz"
10140 PRINT TAB(3,18) "MODE  6 = 80x30:  2 colours (640x240) 60hz"
10150 PRINT TAB(3,20) "MODE  7 = 40x25: 16 colours (320x240) 60hz (orig bbc teletext mode)"
10160 PRINT TAB(3,22) "MODE  8 = 40x30: 64 colours (320x240) 60hz"
10170 PRINT TAB(3,24) "MODE  9 = 40x30: 16 colours (320x240) 60hz"
10180 PRINT TAB(3,26) "MODE 10 = 40x30:  4 colours (320x240) 60hz"
10190 PRINT TAB(3,28) "MODE 11 = 40x30:  2 colours (320x240) 60hz"
10200 PRINT TAB(3,30) "MODE 12 = 40X25: 64 colours (320x200) 70hz"
10210 :
10220 COLOUR 2
10230 INPUT TAB(3,34)"PICK A SCREEN MODE"; mode%
10240 INPUT TAB(3,34)"TYPE B FOR BASIC PROMPT> or M FOR MOS PROMPT* "; BorM$
10245 CALL closeuart% : REM Close the uart
10250 PROC_LOAD_VARS : REM LOAD VARS.
10260 PROC_LOAD_LOGO : REM LOAD UDF CHARS FOR LOGO.
10270 PROC_DRAW_LOGO : REM DRAW LOGO TO SCREEN.
10280 PROC_TITLE_TEXT : REM DRAW TEXT TO SCREEN.
10290 PROC_DRAW_COLOUR_PALETTE : REM DRAW CURRENT PALETTE TO SCREEN.
10300 PROC_READYUP : REM DRAW READY UP TEXT TO SCREEN AND SET PROMPT.
10310 :
10320 NEW : REM CLEAR PROGRAM FROM MEMORY.
10330 REM END OF PROGRAM.
10340 :
10350 DEF PROC_DRAW_LOGO : REM **** DRAW_LOGO ****
10360 REM DISPLAY THE LOGO LINE BY LINE.
10370 REM FROM PREVIOUSLY USER DEFINED CHARS.
10380 COLOUR 14: PRINT TAB(2,1);"  ";CHR$(200);CHR$(201);"   ";
10390 COLOUR 14: PRINT TAB(2,2);"  ";CHR$(202);CHR$(203);"   ";
10400 COLOUR 14: PRINT TAB(2,3);" ";CHR$(204);CHR$(205);CHR$(206);CHR$(207);"  ";
10410 COLOUR 14: PRINT TAB(2,4);CHR$(208);CHR$(209);CHR$(210);CHR$(211);CHR$(212);CHR$(213);" ";
10420 COLOUR 14: PRINT TAB(2,5);CHR$(214);CHR$(215);CHR$(216);CHR$(209);CHR$(217);CHR$(218);" ";
10430 COLOUR 14: PRINT TAB(2,6);CHR$(219);CHR$(220);CHR$(221);CHR$(222);CHR$(223);CHR$(224);" ";
10440 COLOUR 14: PRINT TAB(2,7);CHR$(225);CHR$(226);CHR$(227);CHR$(228);CHR$(229);CHR$(230);" ";
10450 COLOUR 14: PRINT TAB(2,8);CHR$(231);CHR$(232);CHR$(233);CHR$(234);CHR$(235);CHR$(236);" ";
10460 ENDPROC : REM END PROC_DRAW_LOGO.
10470 :
10480 DEF PROC_TITLE_TEXT : REM **** TITLE_TEXT ****
10490 REM DISPLAY TITLE SCREEN TEXT AND INFO LINE BY LINE.
10500 PRINT TAB(10,1);"* AGON LIGHT2 with eZ80 CPU *"
10510 PRINT TAB(10,3);"MODE:";M%;" (";W%;"x";H%;") COLOURS:";C%;
10520 VDU 31,10,5 : REM POSITION CURSOR.
10530 *VERSION : REM PRINT BBC BASIC VERSION.
10540 PRINT TAB(10,7)"BASIC Bytes Free: ";F%;
10550 ENDPROC : REM END PROC_TITLE_TEXT.
10560 :
10570 DEF PROC_DRAW_COLOUR_PALETTE : REM **** COLOUR_PALATTE ****
10580 REM DISPLAY THE CURRENT COLOUR PALLETTE.
10590 VDU 23,238,255,255,255,255,255,255,255,255 : REM FILLED CHAR FOR COLOUR PALLETTE.
10600 :
10610 VDU 31,0,10 : REM MOVE CURSOR, LOOP COLOURS, PRINT COLOURED FILLED CHAR.
10620 FOR PC% = 0 TO C% -1 : REM 1ST 32 COLOURS.
10630   COLOUR PC%
10640   IF PC% <= 31 THEN PRINT ;CHR$(238);
10650 NEXT PC%
10660 :
10670 IF C% >= 32 THEN VDU 10 : VDU 13 : REM MOVE CURSOR, LOOP COLOURS, PRINT COLOURED FILLED CHAR.
10680 FOR PC% = 31 TO C% -1 : REM LAST 32 COLOURS.
10690   COLOUR PC%
10700   IF PC% > 31 THEN PRINT ;CHR$(238);
10710 NEXT PC%
10720 ENDPROC : REM END PROC_DRAW_COLOUR_PALETTE.
10730 :
10740 DEF PROC_READYUP : REM **** READYUP ****
10750 REM SET COLOURS.
10760 COLOUR BG%: COLOUR FG%
10770 REM MOVE CURSOR DOWN AND LEFT.
10780 VDU 10 : VDU 13 : VDU 10
10790 REM SET READY PROMPT.
10800 PRINT "AGON READY."
10810 IF BorM$ = "M" OR BorM$ = "m" THEN *BYE
10820 :
10830 ENDPROC : REM END PROC_READYUP.
10840 :
10850 DEF PROC_LOAD_LOGO : REM **** INIT ****
10860 REM AGON LIGHT "Sitting Kung Fu man" LOAD LOGO CHARS.
10870 REM (second number after the (23 VDU cmd) is the char number, then the char data).
10880 VDU 23,200,7,15,31,31,31,31,31,63
10890 VDU 23,201,192,224,240,240,240,240,240,248
10900 VDU 23,202,63,63,31,15,15,15,7,7
10910 VDU 23,203,248,248,240,224,224,224,192,192
10920 VDU 23,204,0,1,7,15,31,63,127,127
10930 VDU 23,205,7,199,199,195,227,225,240,240
10940 VDU 23,206,192,195,195,135,135,15,15,31
10950 VDU 23,207,0,0,224,240,248,252,252,254
10960 VDU 23,208,0,0,1,1,3,3,7,7
10970 VDU 23,209,255,255,255,255,255,255,255,255
10980 VDU 23,210,248,248,248,240,224,225,193,195
10990 VDU 23,211,63,63,127,255,255,255,255,255
11000 VDU 23,212,255,255,255,255,255,255,223,223
11010 VDU 23,213,0,0,128,128,128,192,192,192
11020 VDU 23,214,7,7,15,15,15,15,15,31
11030 VDU 23,215,255,247,231,231,231,199,135,130
11040 VDU 23,216,199,135,135,143,15,15,31,31
11050 VDU 23,217,207,207,207,199,199,195,129,1
11060 VDU 23,218,224,224,224,240,240,240,240,240
11070 VDU 23,219,31,31,31,31,15,15,15,31
11080 VDU 23,220,128,128,128,128,129,143,135,143
11090 VDU 23,221,31,63,15,0,128,224,224,195
11100 VDU 23,222,252,240,128,0,3,7,35,243
11110 VDU 23,223,1,1,1,129,193,225,241,241
11120 VDU 23,224,240,240,240,240,240,240,240,240
11130 VDU 23,225,31,31,3,3,3,3,7,15
11140 VDU 23,226,223,255,255,255,255,255,254,254
11150 VDU 23,227,199,135,135,7,15,15,31,31
11160 VDU 23,228,241,241,241,248,248,248,248,248
11170 VDU 23,229,253,255,255,255,255,255,255,127
11180 VDU 23,230,240,248,248,224,224,224,240,248
11190 VDU 23,231,31,63,63,63,31,31,15,0
11200 VDU 23,232,254,252,252,252,248,248,224,0
11210 VDU 23,233,31,60,32,0,0,0,0,0
11220 VDU 23,234,120,28,12,12,0,0,0,0
11230 VDU 23,235,127,127,127,127,127,63,15,0
11240 VDU 23,236,248,252,252,252,252,248,240,0
11250 VDU 23,237,255,254,252,248,240,224,192,128
11260 ENDPROC : REM END PROC_LOAD_LOGO
11270 :
11280 DEF PROC_LOAD_VARS : REM **** LOAD VARS ****
11290 M% = mode%: REM SCREEN MODE.
11300 BG% = 132: REM BACKGROUND COLOUR (blue)
11310 FG% = 15: REM FOREGROUND COLOUR (white)
11320 MODE M%: COLOUR BG%: COLOUR FG%: CLS
11330 W% = FN_GETBYTE_VDP(&13): REM GET SCREEN WIDTH IN CHARS.
11340 H% = FN_GETBYTE_VDP(&14): REM GET SCREEN HEIGHT IN CHARS.
11350 C% = FN_GETBYTE_VDP(&15): REM GET NUMBER OF COLOURS.
11360 F% = HIMEM-LOMEM: REM GET FREE BASIC BYTES.
11370 ENDPROC : REM END PROC_LOAD_VARS.
11380 :
11390 :
11400 DEF FN_GETBYTE_VDP(V%): A%=&A0: L%=V%: =USR(&FFF4)
11410 DEF FN_GETWORD_VDP(V%): =FN_GETBYTE_VDP(V%)+256*FN_GETBYTE_VDP(V%+1)
11420 :
